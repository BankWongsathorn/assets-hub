generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  role       Role[]
  employee   Employee[]
}

model Role {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  department_id Int
  department    Department @relation(fields: [department_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  employee      Employee[]
}

model Employee {
  id                 String               @id @default(cuid())
  username           String
  email              String
  password           String
  first_name         String
  last_name          String
  phone              String
  hire_date          DateTime
  exit_date          DateTime?
  department_id      Int
  department         Department           @relation(fields: [department_id], references: [id])
  role_id            Int
  role               Role                 @relation(fields: [role_id], references: [id])
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  Borrowing          Borrowing[]
  MaintenanceRequest MaintenanceRequest[]
  MaintenanceReport  MaintenanceReport[]
}

model Device {
  id                 String               @id @default(cuid())
  lot_number         String
  serial_number      String               @unique
  name               String
  purchase_date      DateTime
  warranty_expiry    DateTime?
  status             String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  Borrowing          Borrowing[]
  MaintenanceRequest MaintenanceRequest[]
}

model Borrowing {
  id          String   @id @default(cuid())
  employee_id String
  employee    Employee @relation(fields: [employee_id], references: [id])
  device_id   String
  device      Device   @relation(fields: [device_id], references: [id])
  borrow_date DateTime
  return_date DateTime
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model MaintenanceRequest {
  id                String              @id @default(cuid())
  device_id         String
  device            Device              @relation(fields: [device_id], references: [id])
  employee_id       String
  employee          Employee            @relation(fields: [employee_id], references: [id])
  issue             String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  MaintenanceReport MaintenanceReport[]
}

model MaintenanceReport {
  id                     String             @id @default(cuid())
  maintenance_request_id String
  maintenance_request    MaintenanceRequest @relation(fields: [maintenance_request_id], references: [id])
  technician_id          String
  technician             Employee           @relation(fields: [technician_id], references: [id])
  description            String
  cost                   Float
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
}
