generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  role       Role[]   @relation()
  user       User[]   @relation()
}

model Role {
  id            String     @id @default(cuid())
  name          String     @unique
  department_id String
  department    Department @relation(fields: [department_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  user          User[]

  @@index([department_id])
}

enum UserStatus {
  Active
  Inactive
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  firstname     String
  lastname      String
  phone         String
  hiredate      String
  status        UserStatus
  department_id String
  department    Department @relation(fields: [department_id], references: [id])
  role_id       String
  role          Role       @relation(fields: [role_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  asset         Asset[]
  reported_by   AuditLog[] @relation("ReportedBy")
  handled_by    AuditLog[] @relation("HandledBy")

  @@index([department_id])
  @@index([role_id])
}

enum AssetStatus {
  Available // พร้อมใช้งาน
  Assigned // ถูกมอบหมาย
  Maintenance // ซ่อมบำรุง
  Returned // คืน
  Disposed // ถูกกำจัด
  Lost // สูญหาย
}

model Asset {
  id              String      @id @default(cuid())
  lot_number      String
  serial_number   String      @unique
  name            String
  purchase_date   String
  warranty_expiry String?
  status          AssetStatus
  user_id         String?
  user            User?       @relation(fields: [user_id], references: [id])
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  auditLog        AuditLog[]

  @@index([user_id])
}

enum AuditLogType {
  Request // การขอใช้งานทรัพย์สิน
  Transfer // การโอนย้ายทรัพย์สิน
  Approval // การอนุมัติคำขอ
  Assignment // การมอบหมายทรัพย์สินให้ผู้ใช้งาน
  Return // การคืนทรัพย์สิน
  Maintenance // การซ่อมบำรุงหรือตรวจสอบทรัพย์สิน
  Disposal // การกำจัดทรัพย์สิน
}

enum AuditLogStatus {
  Pending // กำลังรอการดำเนินการ
  Approved // ได้รับการอนุมัติแล้ว
  Rejected // ถูกปฏิเสธ
  Completed // เสร็จสิ้น
  Cancelled // ถูกยกเลิก
}

model AuditLog {
  id             String         @id @default(cuid())
  asset_id       String
  asset          Asset          @relation(fields: [asset_id], references: [id])
  type           AuditLogType
  status         AuditLogStatus
  remark         String?        @default("")
  reported_by_id String
  reported_by    User           @relation("ReportedBy", fields: [reported_by_id], references: [id])
  handled_by_id  String?
  handled_by     User?          @relation("HandledBy", fields: [handled_by_id], references: [id])
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([asset_id])
  @@index([reported_by_id])
  @@index([handled_by_id])
}
