generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  role       Role[]
  employee   Employee[]
}

model Role {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  department_id Int
  department    Department @relation(fields: [department_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  employee      Employee[]
}

enum EmployeeStatus {
  Active
  Inactive
}

model Employee {
  id              String         @id @default(cuid())
  username        String         @unique
  email           String         @unique
  password        String
  firstname       String
  lastname        String
  phone           String
  hiredate        String
  status          EmployeeStatus
  department_id   Int
  department      Department     @relation(fields: [department_id], references: [id])
  role_id         Int
  role            Role           @relation(fields: [role_id], references: [id])
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  RequestEmployee Request[]      @relation("RequestEmployee")
  RequestApproved Request[]      @relation("RequestApproved")
  HistoryFrom     History[]      @relation("HistoryFrom")
  HistoryTo       History[]      @relation("HistoryTo")
}

enum AssetStatus {
  Available
  Assigned
  Under
  Repair
  Disposed
}

model Asset {
  id              String      @id @default(cuid())
  lot_number      String
  serial_number   String      @unique
  name            String
  purchase_date   String
  warranty_expiry String?
  status          AssetStatus
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  Request         Request[]
  History         History[]
}

enum RequestType {
  Withdrawal
  Repair
}

enum RequestStatus {
  Pending
  Approved
  Rejected
  Completed
}

model Request {
  id          String        @id @default(cuid())
  employee_id String?
  employee    Employee?     @relation("RequestEmployee", fields: [employee_id], references: [id])
  asset_id    String
  asset       Asset         @relation(fields: [asset_id], references: [id])
  type        RequestType
  status      RequestStatus
  approved_by String?
  approved    Employee?     @relation("RequestApproved", fields: [approved_by], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

enum HistoryType {
  Assign
  Return
  Repair
  Unassign
  Dispose
}

model History {
  id         String      @id @default(cuid())
  asset_id   String
  asset      Asset       @relation(fields: [asset_id], references: [id])
  from_id    String?
  from       Employee?   @relation("HistoryFrom", fields: [from_id], references: [id])
  to_id      String?
  to         Employee?   @relation("HistoryTo", fields: [to_id], references: [id])
  type       HistoryType
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
}
